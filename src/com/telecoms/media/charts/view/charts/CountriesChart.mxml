<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%">
	
	<fx:Script>
		<![CDATA[
			import com.telecoms.media.charts.model.ChartsModelLocator;
			import com.telecoms.media.charts.vo.Report;
			
			import mx.charts.chartClasses.AxisBase;
			import mx.charts.chartClasses.Series;
			import mx.charts.events.ChartItemEvent;
			import mx.collections.ArrayCollection;
			
			[Bindable]
			public var model:ChartsModelLocator = ChartsModelLocator.getInstance();
			
			private function reportsCountriesChartData(xmlData:XML):ArrayCollection{
				var totalNodes:int = xmlData.content.length();
				var allCountriesArr:Array = new Array;
				var filteredCountriesArr:Array = new Array;
				var currentItem:String = "dummy";
				
				// Place all Format types from XML service into an Array
				for(var i:int=0; i<totalNodes; i++){
					var currentXML:XML = xmlData.content[i];
					allCountriesArr.push(currentXML.countries);
				}
				// Sort into alphabetical order
				allCountriesArr.sort();
				
				// Count amount of each Format and add to arrayCollection
				for each(var item:String in allCountriesArr){
					if(item!=currentItem){
						filteredCountriesArr.push({Country:item, TotalReports:1});
						currentItem = item;
					}
					else{
						filteredCountriesArr[filteredCountriesArr.length -1].TotalReports++;
					}
				}
				
				// Take out any unnamed Countries
				if(filteredCountriesArr[0].Country==''){
					filteredCountriesArr.splice(0,1);
				}
				
				// Sort data order for chart leaving just the top 12 occuring countries
				filteredCountriesArr.sort(sortOnOccurrence);
				var minChartVal:int = filteredCountriesArr.length-12;
				var maxChartVal:int = filteredCountriesArr.length;
				
				// ArrayCollection for Chart
				var reportsCountriesData:ArrayCollection = new ArrayCollection(filteredCountriesArr.slice(minChartVal,maxChartVal));
				return reportsCountriesData;
			}
			
			private function sortOnOccurrence(a:Object, b:Object):Number {
				var aTotal:Number = a.TotalReports;
				var bTotal:Number = b.TotalReports;
				
				if(aTotal > bTotal) {
					return 1;
				} else if(aTotal < bTotal) {
					return -1;
				} else  {
					//They are the same value
					return 0;
				}
			}

		]]>
	</fx:Script>

	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>

	<s:layout>
		<s:VerticalLayout/>
		
	</s:layout>

	<mx:BarChart id="myChart" width="100%" height="100%" dataProvider="{reportsCountriesChartData(model.appYearData)}" showDataTips="true">
		<mx:verticalAxis>
			<mx:CategoryAxis 
				categoryField="Country"
				/>
		</mx:verticalAxis>
		<mx:series>
			<mx:BarSeries 
				yField="Country" 
				xField="TotalReports" 
				displayName="Total Reports" 
				/>
		</mx:series>
	</mx:BarChart>
	
</s:Group>
